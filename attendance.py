#!/usr/bin/python

from __future__ import print_function  #allows print as function
import cdf_class_list_reader

Debug = True #True

import sys,os
import re  #regular expressions
import matz_utils, grade_file_reader

msg = matz_utils.MessagePrinter(True)

#from: http://stackoverflow.com/questions/510357/python-read-a-single-character-from-the-user
class _Getch:
    """Gets a single character from standard input.  Does not echo to the
screen."""
    def __init__(self):
        self.impl = _GetchUnix()
    def __call__(self): return self.impl()
    
class _GetchUnix:
    def __init__(self):
        import tty

    def __call__(self):
        import tty, termios
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
            tty.setraw(sys.stdin.fileno())
            ch = sys.stdin.read(1)
        finally:
            termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
        return ch


if len(sys.argv) == 3 :
    msg.debug( sys.argv[1], sys.argv[2])
    EMPTY_GRADES = sys.argv[1]
    new_file_name = sys.argv[2]
else:
    msg.warning( "usage: ", sys.argv[0], "grades-empty new-attendance-grades-file")
    exit(2)

print("read: empty_grades", EMPTY_GRADES, "write:", new_file_name)

try:
   attend_file = open(new_file_name,'w')
except:
     msg.eror("could not open ", new_file_name, "for writing")
     exit(42)
     
getch = _Getch()

empty_reader = grade_file_reader.GradeFileReader(EMPTY_GRADES)

#copy the header to output. 
#todo: add a comment or something and a definition line
first_time = True
for l in empty_reader.skipHeader():
    print(l, file=attend_file)
    if first_time:
        first_time = False
        print("* this grades file generated by ", sys.argv[0], file=attend_file)
        print("attend/2 * 0=absent 1=present", file=attend_file)

#prompt for attendance and write to file
print( "in response to each line, enter 0-absent *-present\n\n")

for line in empty_reader.readLines():
    (dropped, flag_char, cdfid, sec, ta) =  empty_reader.parseEmptyGradeFileLine(line)
    #print(cdfid)

    #make sure output line ends with a comma   
    out_line = line.rstrip()
    if not out_line.endswith(","):
        out_line += ","
    #print(line)
    #sys.stdout.write("0-absent 1-present 2-remote *-present: ")
    sys.stdout.write(out_line)
    
    #show picture
    os.system('open "pics/%s.jpg"' % cdfid)

    #program waits on raw input..
    c = getch()
    if c == 'q' or  c == 'Q' or c == '\x03' or c == '\x04': # control-c or control-d
        print("\n\nquit on q, control-c, control-d")
        exit(1)
    # echo what user typed (getch eats it)
    
    # space, enter and anything else means "present"
    if c == '0' or c=='1' or c =='2':
        out_line += c
        print(c)
    else:
        out_line += "1"
        print('1')
        
    print(out_line, file=attend_file)
    
attend_file.close()
     

